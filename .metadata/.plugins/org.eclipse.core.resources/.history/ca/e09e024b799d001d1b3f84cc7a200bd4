package wissenTech;

import java.util.Collection;
import java.util.Map;
import java.util.Set;

class MapMethodCallCount<K, V> implements Map<K, V> {
    private final Map<K, V> map;  // map being decorated

    private int countPut;
    private int countPutAll;
    private int countPutIfAbsent;

    public MapMethodCallCount(Map<K, V> map) {
        this.map = map;
    }

    // stats getters
    public int getCountPut() { return countPut; }
    public int getCountPutAll() { return countPutAll; }
    public int getCountPutIfAbsent() { return countPutIfAbsent; }

    @Override public V put(K key, V value) {
        countPut++;
        return map.put(key, value);
    }

    @Override public void putAll(Map<? extends K, ? extends V> m) {
        countPutAll++;
        map.putAll(m);
    }

    @Override public V putIfAbsent(K key, V value) {
        countPutIfAbsent++;
        return map.putIfAbsent(key, value);
    }

 
}